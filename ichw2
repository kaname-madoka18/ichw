一、停机问题
    1.停机问题说明计算机的逻辑体系中同样存在逻辑上无法证明也无法证伪的命题，证明哥德尔不完全性定理同样对计算机适用
    2.停机问题的证明使用了反证法
    3.设定函数f(program, input)，如果程序对输入会停机则输出ture,不会停机输出false,再假设函数g(program)，如果f(program, program)输出ture则无限循环，
      反之则输出ture，当输入g(g)时，若f判定g会停机（返回ture)则g将无限循环即不会停机，若f判定g不会停机（返回false）则g将输出ture，
      也就是会停机。无论哪种都是矛盾的。
二、二进制补码
      二进制补码是在原码的基础上改进得来的，二进制原码第一位是符号位，1代表负数、0代表正数，后面的数字是二进制数，这种编码方式存在很大的问题，因为计算机
      进行同符号的加法运算要更为简单，加入减法（或者说正数加负数）运算会使程序极大地复杂化并降低运算速度。因此，早起的计算机科学工作者就想设计一种编码方
      法，把减法转化成加法来简化程序，于是补码应运而生，补码的第一位仍然是和原码一样的符号位，正数的数值与原码完全一致，负数的数值每一位都与原码相反并在
      最后一位加一，这样一来我们考察各种运算。
      1.两正数的加法，这项运算与原码完全一致
      2.两负数的加法，设计算机的模是n,模是指最大能表示的二进制数加一，比如有4位，模就是2的4次方，即16，在计算机的算法中，如果两数的和超出模，则仅显示溢
        出的部分（或者理解为除以模的余数），那么最大能表示的数就是（n/2 -1),记为m,设两个负数a,b,且a+b不小于-m（不能超出能表示的最小数），取他们的补码
        相加，符号位两个1相加溢出变为0，数值位m+1+a+m+1+b=(m+1)+m+1+a+b,根据前面的假设，（m+1+a+b）是正数位于数值位，表示为2进制后（m+1）进到符号位
        上表示负数，取结果的补码数值位变为m+1-(m+1+a+b)=-(a+b),得出了正确的结果
      3.正数和负数的加法，设正数a,负数b，取补码相加得m+1+b+a,若a>-b（或等于）则（m+1)进到符号位1+0+1=0，表示正数（或零），数值位为（a+b),取补码不变，
        得到正确结果；反之若a<-b则符号位是1，数值位是(m+1+b+a),取补码后符号位仍为1，表示负数，数值位变为-（b+a)，得到正确结果。
      这样就证明了任意两个数（无论正负）的补码相加都等于这两个数和的补码，所以用补码表示数可以将加和减简化成一种运算。
三、浮点数
